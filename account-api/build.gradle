plugins {
    id 'org.springframework.boot' version "$SPRING_BOOT_VERSION"
    id 'io.spring.dependency-management' version "$SPRING_DEPENDENCY_MANAGEMENT_VERSION"
    id 'java'
}

version = '1.0'
sourceCompatibility = "$SOURCE_COMPATIBILITY_JAVA_VERSION"
group = 'com.kkoemets'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation project(':core')
    implementation project(':domain')
    implementation project(':core-amqp')
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation "com.zaxxer:HikariCP:$HIKARI_VERSION"
    implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:$MYBATIS_VERSION"
    runtimeOnly "org.postgresql:postgresql:$POSTGRES_VERSION"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}


sourceSets {
    integrationTest {
        java {
            srcDirs 'src/integration-test/java'
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
        resources.srcDir 'src/integration-test/resources'
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

sourceSets {
    restTest {
        java {
            srcDirs 'src/rest-test/java'
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
        resources.srcDir 'src/rest-test/resources'
    }
}

task restTest(type: Test) {
    useJUnitPlatform()
    group = 'verification'
    testClassesDirs = sourceSets.restTest.output.classesDirs
    classpath = sourceSets.restTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestImplementation.extendsFrom runtimeOnly

    restTestImplementation.extendsFrom implementation
    restTestImplementation.extendsFrom testImplementation
    restTestImplementation.extendsFrom runtimeOnly
}
